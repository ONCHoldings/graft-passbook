var fs = require('fs'); 
var _ = require('underscore');

module.exports = {
  vars: {
    $certPath: '', // === Holds the path to the certificate
    $name: '', // === Name of the downloaded file
    $files: [], // === Holds the files to include in the .pkpass
    $JSON: {}, // === Holds the json
    $SHAs: [], // === Holds the SHAs of the $files array
    $certPass: '', // === Holds the password to the certificate
    $WWDRcertPath: '', // === Holds the path to the WWDR Intermediate certificate
    $tempPath: '/tmp/', // === Holds the path to a temporary folder
    $sError: '', // === Holds error info if an error occured
    $uniqid: null // === Holds a autogenerated uniqid to prevent overwriting other processes pass files
  },
  init: function($certPath, $certPass, $JSON) {
    console.log('start constructo : ', this);
    if(typeof($certPath) !== 'undefined' && $certPath !== false) {
      this.setCertificate($certPath);
    }
    if(typeof($JSON) !== 'undefined' && $JSON !== false) {
      this.setJSON($JSON);
    }
    if(typeof($certPass) !== 'undefined' && $certPass !== false) {
      this.setCertificatePassword($certPass);
    }
  },
  // ======= ================ ======= //
  // ======= PUBLIC FUNCTIONS ======= //
  // ======= ================ ======= //
  debugVars: function() {
    console.log("certPath: ", this.vars.$certPath);
    console.log("name: ", this.vars.$name);
    console.log("files: ", this.vars.$files);
    console.log("JSON: ", this.vars.$JSON);
    console.log("SHAs: ", this.vars.$SHAs);
    console.log("certPass: ", this.vars.$certPass);
    console.log("WWDRcertPath: ", this.vars.$WWDRcertPath);
    console.log("tempPath: ", this.vars.$tempPath);
    console.log("sError: ", this.vars.$sError);
    console.log("uniqid: ", this.vars.$uniqid);
  },
  setCertificate: function($path) {
    var me = this;
    fs.exists($path, function($exists) {
      if($exists) {
        me.vars.$certPath = $path;
        console.log('Certificate file exists');
        console.log('VARS AFTER: ', me.vars);
      } else {
        console.log('Certificate file does not exist.');
      }
    });
  },
  setCertificatePassword: function($p) {
    this.vars.$certPass = $p;
    return true;
  },
  setJSON: function($JSON) {
    var res = false;
    if(_.isObject($JSON)) {
      this.vars.$JSON = $JSON;
      res = true;
    } else {
      this.vars.$sError = 'This is not a JSON string.';
    }
    return res;
  },
  // ======= ================= ======= //
  // ======= PRIVATE FUNCTIONS ======= //
  // ======= ================= ======= //
  createManifest: function() { // === creates the hashes for the files and adds them into a json string
    
  },
  /*
	* Converts PKCS7 PEM to PKCS7 DER
	* Parameter: string, holding PKCS7 PEM, binary, detached
	* Return: string, PKCS7 DER
	*/
  convertPEMtoDER: function($signature) {
    
  },
  /*
	* Creates a signature and saves it
	* Parameter: json-string, manifest file
	* Return: boolean, true on succes, failse on failure
	*/
  createSignature: function($manifest) {
    
  },
  /*
	* Creates .pkpass (zip archive)
	* Parameter: json-string, manifest file
	* Return: boolean, true on succes, false on failure
	*/
  createZip: function($manifest) {
    
  },
  paths: function() { // === declares all paths used for temporary files
    
  },
  clean: function() { // === removes all temporary files
    
  }
};